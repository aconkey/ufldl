function [cost, grad] = softmaxCost(theta, k, n, lambda, x, y)

% numClasses - the number of classes 
% inputSize - the size N of the input vector
% lambda - weight decay parameter
% data - the N x M input matrix, where each column data(:, i) corresponds to
%        a single test set
% labels - an M x 1 matrix containing the labels corresponding for the input data
%

% Unroll the parameters from theta
theta = reshape(theta, k, n);						
													
m = size(data, 2);									

groundTruth = full(sparse(y, 1:m, 1));
cost = 0;

thetagrad = zeros(k, n);

%% ---------- YOUR CODE HERE --------------------------------------
%  Instructions: Compute the cost and gradient for softmax regression.
%                You need to compute thetagrad and cost.
%                The groundTruth matrix might come in handy.

expvals = exp(theta * x)									% theta   k x n
															% x       n x m
for i = 1 : m												% expvals k x m
	for j = 1 : k
		cost = cost + (y(i) == j) * log(expvals(
	end
end









% ------------------------------------------------------------------
% Unroll the gradient matrices into a vector for minFunc
grad = [thetagrad(:)];
end

